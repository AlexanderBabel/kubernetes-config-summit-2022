mautrix-whatsapp:
  fullnameOverride: mautrix-whatsapp

  replicaCount: 1

  image:
    repository: dock.mau.dev/mautrix/whatsapp
    tag: v0.7.1
    pullPolicy: IfNotPresent

  serviceAccount:
    create: false

  resources:
    {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  probes:
    liveness:
      failureThreshold: 5
      periodSeconds: 86400 # once a day
    readiness:
      failureThreshold: 5
      periodSeconds: 30
    startup:
      initialDelaySeconds: 5
      failureThreshold: 30
      periodSeconds: 10

  service:
    port: 80

  config:
    metrics:
      enabled: true
      listen: 0.0.0.0:8000

    homeserver:
      address: https://babel1.eu
      # address: https://matrix-synapse.matrix.svc.cluster.local
      domain: babel1.eu

    appservice:
      address: http://mautrix-whatsapp.matrix.svc.cluster.local
      port: 8080

      database:
        type: postgres
        uri: "" # Set in secrets.values.yaml

      as_token: "" # Set in secrets.values.yaml
      hs_token: "" # Set in secrets.values.yaml

      # Settings for provisioning API
      provisioning:
        # Prefix for the provisioning API paths.
        prefix: /_matrix/provision/v1
        # Shared secret for authentication. If set to "disable", the provisioning API will be disabled.
        shared_secret: disable

      # The unique ID of this appservice.
      id: whatsapp
      # Appservice bot details.
      bot:
        # Username of the appservice bot.
        username: whatsappbot
        # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
        # to leave display name/avatar as-is.
        displayname: WhatsApp bridge bot
        avatar: mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr

    bridge:
      # Localpart template of MXIDs for WhatsApp users.
      # {{.}} is replaced with the phone number of the WhatsApp user.
      username_template: whatsapp_{{.}}
      # Displayname template for WhatsApp users.
      # {{.PushName}}     - nickname set by the WhatsApp user
      # {{.BusinessName}} - validated WhatsApp business name
      # {{.Phone}}        - phone number (international format)
      # The following variables are also available, but will cause problems on multi-user instances:
      # {{.FullName}}  - full name from contact list
      # {{.FirstName}} - first name from contact list
      displayname_template: "{{if .PushName}}{{.PushName}}{{else if .BusinessName}}{{.BusinessName}}{{else}}{{.JID}}{{end}} (WA)"

      # Should the bridge create a space for each logged-in user and add bridged rooms to it?
      # Users who logged in before turning this on should run `!wa sync space` to create and fill the space for the first time.
      personal_filtering_spaces: true

      # Whether or not the bridge should send a read receipt from the bridge bot when a message has been
      # sent to WhatsApp. If fetch_message_on_timeout is enabled, a successful post-timeout fetch will
      # trigger a read receipt too.
      delivery_receipts: false

      portal_message_buffer: 128

      # Whether or not to send call start/end notices to Matrix.
      call_notices:
        start: true
        end: true

      history_sync:
        # Whether to create portals from history sync payloads from WhatsApp.
        create_portals: true
        # Whether to enable backfilling history sync payloads from WhatsApp using batch sending
        # This requires a server with MSC2716 support, which is currently an experimental feature in synapse.
        # It can be enabled by setting experimental_features -> enable_msc2716 to true in homeserver.yaml.
        backfill: true
        # Whether to use custom puppet for backfilling.
        # In order to use this, the custom puppets must be in the appservice's user ID namespace.
        double_puppet_backfill: true
      # Whether or not puppet avatars should be fetched from the server even if an avatar is already set.
      user_avatar_sync: true
      # Whether or not Matrix users leaving groups should be bridged to WhatsApp
      bridge_matrix_leave: true

      # Whether or not to sync with custom puppets to receive EDUs that
      # are not normally sent to appservices.
      sync_with_custom_puppets: true
      # Whether or not to update the m.direct account data event when double puppeting is enabled.
      # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
      # and is therefore prone to race conditions.
      sync_direct_chat_list: false
      # When double puppeting is enabled, users can use `!wa toggle` to change whether or not
      # presence and read receipts are bridged. These settings set the default values.
      # Existing users won't be affected when these are changed.
      default_bridge_receipts: true
      default_bridge_presence: true
      # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
      #
      # If set, custom puppets will be enabled automatically for local users
      # instead of users having to find an access token and run `login-matrix`
      # manually.
      login_shared_secret: "" # Set in secrets.values.yaml

      # Whether to explicitly set the avatar and room name for private chat portal rooms.
      private_chat_portal_meta: true
      # Whether Matrix m.notice-type messages should be bridged.
      bridge_notices: true
      # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
      # This field will automatically be changed back to false after it, except if the config file is not writable.
      resend_bridge_info: false
      # When using double puppeting, should muted chats be muted in Matrix?
      mute_bridging: false
      # When using double puppeting, should archived chats be moved to a specific tag in Matrix?
      # Note that WhatsApp unarchives chats when a message is received, which will also be mirrored to Matrix.
      # This can be set to a tag (e.g. m.lowpriority), or null to disable.
      archive_tag: null
      # Same as above, but for pinned chats. The favorite tag is called m.favourite
      pinned_tag: null
      # Whether or not mute status and tags should only be bridged when the portal room is created.
      tag_only_on_create: true
      # Whether or not WhatsApp status messages should be bridged into a Matrix room.
      # Disabling this won't affect already created status broadcast rooms.
      enable_status_broadcast: true

      # Whether or not thumbnails from WhatsApp should be sent.
      # They're disabled by default due to very low resolution.
      whatsapp_thumbnail: false

      # Allow invite permission for user. User can invite any bots to room with whatsapp
      # users (private chat and groups)
      allow_user_invite: false

      # The prefix for commands. Only required in non-management rooms.
      command_prefix: "!wa"

      # Messages sent upon joining a management room.
      # Markdown is supported. The defaults are listed below.
      management_room_text:
        # Sent when joining a room.
        welcome: "Hello, I'm a WhatsApp bridge bot."
        # Sent when joining a management room and the user is already logged in.
        welcome_connected: "Use `help` for help."
        # Sent when joining a management room and the user is not logged in.
        welcome_unconnected: "Use `help` for help or `login` to log in."
        # Optional extra text sent when joining a management room.
        # additional_help: "This would be some additional text in case you need it."

      # End-to-bridge encryption support options.
      #
      # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html for more info.
      encryption:
        allow: true
        default: true
        key_sharing:
          allow: true

      # Permissions for using the bridge.
      # Permitted values:
      # relaybot - Talk through the relaybot (if enabled), no access otherwise
      #     user - Access to use the bridge to chat with a WhatsApp account.
      #    admin - User level and some additional administration tools
      # Permitted keys:
      #        * - All Matrix users
      #   domain - All users on that homeserver
      #     mxid - Specific user
      permissions:
        "babel1.eu": user
        "keks.club": user
        "@alex:babel1.eu": admin

      relaybot:
        enabled: false

      # Allow using double puppeting from any server with a valid client .well-known file.
      double_puppet_allow_discovery: true

    # Logging config.
    logging:
      # The directory for log files. Will be created if not found.
      directory: ./logs
      # Available variables: .Date for the file date and .Index for different log files on the same day.
      file_name_format: "{{.Date}}-{{.Index}}.log"
      # Date format for file names in the Go time format: https://golang.org/pkg/time/#pkg-constants
      file_date_format: 2006-01-02
      # Log file permissions.
      file_mode: 0600
      # Timestamp format for log entries in the Go time format.
      timestamp_format: Jan _2, 2006 15:04:05
      # Minimum severity for log messages.
      # Options: debug, info, warn, error, fatal
      print_level: info

  registration:
    id: whatsapp
    as_token: "" # Set in secrets.values.yaml
    hs_token: "" # Set in secrets.values.yaml
    namespaces:
      users:
        - exclusive: true
          regex: '@whatsapp_[0-9]+:babel1\.eu'
        - exclusive: true
          regex: '@whatsappbot:babel1\.eu'
    url: http://mautrix-whatsapp.matrix.svc.cluster.local
    sender_localpart: "" # Set in secrets.values.yaml
    rate_limited: false

  persistence:
    enabled: true
    size: 100Mi
