mautrix-instagram:
  replicaCount: 1

  image:
    repository: dock.mau.dev/mautrix/instagram
    tag: v0.2.1
    pullPolicy: IfNotPresent

  fullnameOverride: mautrix-instagram

  serviceAccount:
    create: false

  # podSecurityContext:
  #   fsGroup: 1337

  # securityContext:
  #   runAsUser: 1337
  #   runAsGroup: 1337
    # privileged: true
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  probes:
    liveness:
      failureThreshold: 5
      periodSeconds: 86400 # once a day
    readiness:
      failureThreshold: 5
      periodSeconds: 30
    startup:
      initialDelaySeconds: 5
      failureThreshold: 30
      periodSeconds: 10

  # service:
  #   port: 80

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  config:
    # Homeserver details
    homeserver:
      # The address that this appservice can use to connect to the homeserver.
      address: https://babel1.eu
      # address: http://matrix-synapse.matrix.svc.cluster.local
      # The domain of the homeserver (for MXIDs, etc).
      domain: babel1.eu
      # Whether or not to verify the SSL certificate of the homeserver.
      # Only applies if address starts with https://
      verify_ssl: true
      asmux: false
      # Number of retries for all HTTP requests if the homeserver isn't reachable.
      http_retry_count: 4
      # The URL to push real-time bridge status to.
      # If set, the bridge will make POST requests to this URL whenever a user's Instagram MQTT connection state changes.
      # The bridge will use the appservice as_token to authorize requests.
      status_endpoint: null
      # Endpoint for reporting per-message status.
      message_send_checkpoint_endpoint: null
      # Whether asynchronous uploads via MSC2246 should be enabled for media.
      # Requires a media repo that supports MSC2246.
      async_media: false

    # Application service host/registration related details
    # Changing these values requires regeneration of the registration.
    appservice:
      # The address that the homeserver can use to connect to this appservice.
      address: http://mautrix-instagram.matrix.svc.cluster.local
      # When using https:// the TLS certificate and key files for the address.
      tls_cert: false
      tls_key: false

      # The hostname and port where this appservice should listen.
      hostname: 0.0.0.0
      port: 8080
      # The maximum body size of appservice API requests (from the homeserver) in mebibytes
      # Usually 1 is enough, but on high-traffic bridges you might need to increase this to avoid 413s
      max_body_size: 1

      # The full URI to the database. Only Postgres is currently supported.
      database: "" # Set in secrets.values.yaml
      # Additional arguments for asyncpg.create_pool()
      # https://magicstack.github.io/asyncpg/current/api/index.html#asyncpg.pool.create_pool
      database_opts:
        min_size: 5
        max_size: 10

      # The unique ID of this appservice.
      id: instagram
      # Username of the appservice bot.
      bot_username: instagrambot
      # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
      # to leave display name/avatar as-is.
      bot_displayname: Instagram bridge bot
      bot_avatar: mxc://maunium.net/JxjlbZUlCPULEeHZSwleUXQv

      # Whether or not to receive ephemeral events via appservice transactions.
      # Requires MSC2409 support (i.e. Synapse 1.22+).
      # You should disable bridge -> sync_with_custom_puppets when this is enabled.
      ephemeral_events: false

      # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
      as_token: "" # Set in secrets.values.yaml
      hs_token: "set in secrets.values.yaml" # Set in secrets.values.yaml

    # Prometheus telemetry config. Requires prometheus-client to be installed.
    metrics:
      enabled: false
      listen_port: 8000

    # Manhole config.
    manhole:
      # Whether or not opening the manhole is allowed.
      enabled: false
      # The path for the unix socket.
      path: /var/tmp/mautrix-instagram.manhole
      # The list of UIDs who can be added to the whitelist.
      # If empty, any UIDs can be specified in the open-manhole command.
      whitelist:
        - 0

    instagram:
      # Seed for generating devices. This is secret because the seed is used to generate
      # device IDs, which can apparently be used to bypass two-factor authentication after
      # logging out, because Instagram is insecure.
      device_seed: generate

    # Bridge config
    bridge:
      # Localpart template of MXIDs for Instagram users.
      # {userid} is replaced with the user ID of the Instagram user.
      username_template: "instagram_{userid}"
      # Displayname template for Instagram users.
      # {displayname} is replaced with the display name of the Instagram user.
      # {username} is replaced with the username of the Instagram user.
      displayname_template: "{displayname} (Instagram)"
      # Displayname template for 1:1 chat portals. Same variables as displayname_template.
      private_chat_name_template: "{displayname}"
      # Displayname template for group chat portals. Only {name} is available.
      group_chat_name_template: "{name}"

      # Maximum length of displayname
      displayname_max_length: 100

      # Maximum number of seconds since the last activity in a chat to automatically create portals.
      portal_create_max_age: 259200
      # Maximum number of chats to fetch for startup sync
      chat_sync_limit: 20
      # Maximum number of chats to create during startup sync
      chat_create_limit: 10
      # Should the chat list be synced on startup?
      # If false, the bridge will try to reconnect to MQTT directly and ask the server to send missed events.
      resync_on_startup: true
      # Whether or not to use /sync to get read receipts and typing notifications
      # when double puppeting is enabled
      sync_with_custom_puppets: true
      # Whether or not to update the m.direct account data event when double puppeting is enabled.
      # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
      # and is therefore prone to race conditions.
      sync_direct_chat_list: false
      # Allow using double puppeting from any server with a valid client .well-known file.
      double_puppet_allow_discovery: true
      # Servers to allow double puppeting from, even if double_puppet_allow_discovery is false.
      double_puppet_server_map:
        # babel1.eu: http://matrix-synapse.matrix.svc.cluster.local
      # Shared secret for https://github.com/devture/matrix-synapse-shared-secret-auth
      #
      # If set, custom puppets will be enabled automatically for local users
      # instead of users having to find an access token and run `login-matrix`
      # manually.
      # If using this for other servers than the bridge's server,
      # you must also set the URL in the double_puppet_server_map.
      login_shared_secret_map:
        babel1.eu: "" # Set in secrets.values.yaml
      # Whether or not created rooms should have federation enabled.
      # If false, created portal rooms will never be federated.
      federate_rooms: true
      # Settings for backfilling messages from Instagram.
      backfill:
        # Whether or not the Instagram users of logged in Matrix users should be
        # invited to private chats when backfilling history from Instagram. This is
        # usually needed to prevent rate limits and to allow timestamp massaging.
        invite_own_puppet: true
        # Maximum number of messages to backfill initially.
        # Set to 0 to disable backfilling when creating portal.
        initial_limit: 1000
        # Maximum number of messages to backfill if messages were missed while
        # the bridge was disconnected.
        # Set to 0 to disable backfilling missed messages.
        missed_limit: 1000
        # If using double puppeting, should notifications be disabled
        # while the initial backfill is in progress?
        disable_notifications: false
      periodic_reconnect:
        # Interval in seconds in which to automatically reconnect all users.
        # This can be used to automatically mitigate the bug where Instagram stops sending messages.
        # Set to -1 to disable periodic reconnections entirely.
        interval: -1
        # Whether or not the bridge should backfill chats when reconnecting.
        resync: true
        # Should even disconnected users be reconnected?
        always: false
      # End-to-bridge encryption support options. You must install the e2be optional dependency for
      # this to work. See https://github.com/tulir/mautrix-telegram/wiki/End‐to‐bridge-encryption
      encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: true
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: true
        # Options for automatic key sharing.
        key_sharing:
          # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
          # You must use a client that supports requesting keys from other users to use this feature.
          allow: true
          # Require the requesting device to have a valid cross-signing signature?
          # This doesn't require that the bridge has verified the device, only that the user has verified it.
          # Not yet implemented.
          require_cross_signing: false
          # Require devices to be verified by the bridge?
          # Verification by the bridge is not yet implemented.
          require_verification: false
      # Whether or not to explicitly set the avatar and room name for private
      # chat portal rooms. This will be implicitly enabled if encryption.default is true.
      private_chat_portal_meta: true
      # Whether or not the bridge should send a read receipt from the bridge bot when a message has
      # been sent to Instagram.
      delivery_receipts: false
      # Whether or not delivery errors should be reported as messages in the Matrix room.
      delivery_error_reports: false
      # Set this to true to tell the bridge to re-send m.bridge events to all rooms on the next run.
      # This field will automatically be changed back to false after it,
      # except if the config file is not writable.
      resend_bridge_info: false
      # Whether or not unimportant bridge notices should be sent to the user.
      # (e.g. connected, disconnected but will retry)
      unimportant_bridge_notices: true
      # Disable bridge notices entirely
      disable_bridge_notices: false

      # Provisioning API part of the web server for automated portal creation and fetching information.
      # Used by things like mautrix-manager (https://github.com/tulir/mautrix-manager).
      provisioning:
        # Whether or not the provisioning API should be enabled.
        enabled: true
        # The prefix to use in the provisioning API endpoints.
        prefix: /_matrix/provision/v1
        # The shared secret to authorize users of the API.
        # Set to "generate" to generate and save a new token.
        shared_secret: "" # Set in secrets.values.yaml

      # The prefix for commands. Only required in non-management rooms.
      command_prefix: "!ig"

      # Permissions for using the bridge.
      # Permitted values:
      #      relay - Allowed to be relayed through the bridge, no access to commands.
      #       user - Use the bridge with puppeting.
      #      admin - Use and administrate the bridge.
      # Permitted keys:
      #        * - All Matrix users
      #   domain - All users on that homeserver
      #     mxid - Specific user
      permissions:
        "babel1.eu": user
        "keks.club": user
        "@alex:babel1.eu": admin

      relay:
        # Whether relay mode should be allowed. If allowed, `!ig set-relay` can be used to turn any
        # authenticated user into a relaybot for that chat.
        enabled: false
        # The formats to use when sending messages to Instagram via a relay user.
        #
        # Available variables:
        #   $sender_displayname - The display name of the sender (e.g. Example User)
        #   $sender_username    - The username (Matrix ID localpart) of the sender (e.g. exampleuser)
        #   $sender_mxid        - The Matrix ID of the sender (e.g. @exampleuser:example.com)
        #   $message            - The message content
        #
        # Note that Instagram doesn't support captions for images, so images won't include any indication of being relayed.
        message_formats:
          m.text: "$sender_displayname: $message"
          m.notice: "$sender_displayname: $message"
          m.emote: "* $sender_displayname $message"

    # Python logging configuration.
    #
    # See section 16.7.2 of the Python documentation for more info:
    # https://docs.python.org/3.6/library/logging.config.html#configuration-dictionary-schema
    logging:
      version: 1
      formatters:
        colored:
          (): mautrix_instagram.util.ColorFormatter
          format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
        normal:
          format: "[%(asctime)s] [%(levelname)s@%(name)s] %(message)s"
      handlers:
        console:
          class: logging.StreamHandler
          formatter: colored
      loggers:
        mau:
          level: INFO
        mauigpapi:
          level: INFO
        aiohttp:
          level: WARN
        paho.mqtt:
          level: INFO
      root:
        level: INFO
        handlers: [console]

  registration:
    id: instagram
    as_token: "" # Set in secrets.values.yaml
    hs_token: "" # Set in secrets.values.yaml
    namespaces:
      users:
        - exclusive: true
          regex: '@instagram.*:babel1\.eu'
        - exclusive: true
          regex: '@instagrambot:babel1\.eu'
      aliases:
        - exclusive: true
          regex: \#instagram.*:babel1\.eu
    url: http://mautrix-instagram.matrix.svc.cluster.local:8080
    sender_localpart: "" # Set in secrets.values.yaml
    rate_limited: false
